async function moduleInitFunction(require,exports={}){function toSet(chars){let flat=Object.keys(chars).join(""),words=/\w/.test(flat);return words&&(flat=flat.replace(/\w/g,"")),`[${words?"\\w":""}${flat.replace(/[^\w\s]/g,"\\$&")}]`}function prefixMatch(options){let first=Object.create(null),rest=Object.create(null);for(let{label}of options){first[label[0]]=!0;for(let i=1;i<label.length;i++)rest[label[i]]=!0}let source=toSet(first)+toSet(rest)+"*$";return[new RegExp("^"+source),new RegExp(source)]}/// Given a a fixed array of options, return an autocompleter that
/// completes them.
function completeFromList(list){let options=list.map(o=>"string"==typeof o?{label:o}:o),[span,match]=options.every(o=>/^\w+$/.test(o.label))?[/\w*$/,/\w+$/]:prefixMatch(options);return context=>{let token=context.matchBefore(match);return token||context.explicit?{from:token?token.from:context.pos,options,span}:null}}/// Wrap the given completion source so that it will only fire when the
/// cursor is in a syntax node with one of the given names.
function cur(state){return state.selection.main.head}// Make sure the given regexp has a $ at its end and, if `start` is
// true, a ^ at its start.
function ensureAnchor(expr,start){var _a;let{source}=expr,addStart=start&&"^"!=source[0],addEnd="$"!=source[source.length-1];return addStart||addEnd?new RegExp(`${addStart?"^":""}(?:${source})${addEnd?"$":""}`,null!==(_a=expr.flags)&&void 0!==_a?_a:expr.ignoreCase?"i":""):expr}/// This annotation is added to transactions that are produced by
/// picking a completion.
function applyCompletion(view,option){let apply=option.completion.apply||option.completion.label,result=option.source;"string"==typeof apply?view.dispatch({changes:{from:result.from,to:result.to,insert:apply},selection:{anchor:result.from+apply.length},userEvent:"input.complete",annotations:pickedCompletion.of(option.completion)}):apply(view,option.completion,result.from,result.to)}function asSource(source){if(!Array.isArray(source))return source;let known=SourceCache.get(source);return known||SourceCache.set(source,known=completeFromList(source)),known}// A pattern matcher for fuzzy completion matching. Create an instance
// once for a pattern, and then use that to match any number of
// completions.
function joinClass(a,b){return a?b?a+" "+b:a:b}function optionContent(config){let content=config.addToOptions.slice();return config.icons&&content.push({render(completion){let icon=document.createElement("div");return icon.classList.add("cm-completionIcon"),completion.type&&icon.classList.add(...completion.type.split(/\s+/g).map(cls=>"cm-completionIcon-"+cls)),icon.setAttribute("aria-hidden","true"),icon},position:20}),content.push({render(completion,_s,match){let labelElt=document.createElement("span");labelElt.className="cm-completionLabel";let{label}=completion,off=0;for(let j=1;j<match.length;){let from=match[j++],to=match[j++];from>off&&labelElt.appendChild(document.createTextNode(label.slice(off,from)));let span=labelElt.appendChild(document.createElement("span"));span.appendChild(document.createTextNode(label.slice(from,to))),span.className="cm-completionMatchedText",off=to}return off<label.length&&labelElt.appendChild(document.createTextNode(label.slice(off))),labelElt},position:50},{render(completion){if(!completion.detail)return null;let detailElt=document.createElement("span");return detailElt.className="cm-completionDetail",detailElt.textContent=completion.detail,detailElt},position:80}),content.sort((a,b)=>a.position-b.position).map(a=>a.render)}function createInfoDialog(option,view$1){let dom=document.createElement("div");dom.className="cm-tooltip cm-completionInfo";let{info}=option.completion;if("string"==typeof info)dom.textContent=info;else{let content=info(option.completion);content.then?content.then(node=>dom.appendChild(node),e=>view.logException(view$1.state,e,"completion info")):dom.appendChild(content)}return dom}function rangeAroundSelected(total,selected,max){if(total<=max)return{from:0,to:total};if(selected<=total>>1){let off=Math.floor(selected/max);return{from:off*max,to:(off+1)*max}}let off=Math.floor((total-selected)/max);return{from:total-(off+1)*max,to:total-off*max}}// We allocate a new function instance every time the completion
// changes to force redrawing/repositioning of the tooltip
function completionTooltip(stateField){return view=>new CompletionTooltip(view,stateField)}function scrollIntoView(container,element){let parent=container.getBoundingClientRect(),self=element.getBoundingClientRect();self.top<parent.top?container.scrollTop-=parent.top-self.top:self.bottom>parent.bottom&&(container.scrollTop+=self.bottom-parent.bottom)}// Used to pick a preferred option when two options with the same
// label occur in the result.
function score(option){return 100*(option.boost||0)+(option.apply?10:0)+(option.info?5:0)+(option.type?1:0)}function sortOptions(active,state){let options=[],i=0;for(let a of active)if(a.hasResult())if(!1===a.result.filter)for(let option of a.result.options)options.push(new Option(option,a,[1e9-i++]));else{let match,matcher=new FuzzyMatcher(state.sliceDoc(a.from,a.to));for(let option of a.result.options)(match=matcher.match(option.label))&&(null!=option.boost&&(match[0]+=option.boost),options.push(new Option(option,a,match)))}options.sort(cmpOption);let result=[],prev=null;for(let opt of options.sort(cmpOption)){if(result.length==MaxOptions)break;prev&&prev.label==opt.completion.label&&prev.detail==opt.completion.detail&&prev.type==opt.completion.type&&prev.apply==opt.completion.apply?score(opt.completion)>score(prev)&&(result[result.length-1]=opt):result.push(opt),prev=opt.completion}return result}function sameResults(a,b){if(a==b)return!0;for(let iA=0,iB=0;;){for(;iA<a.length&&!a[iA].hasResult;)iA++;for(;iB<b.length&&!b[iB].hasResult;)iB++;let endA=iA==a.length,endB=iB==b.length;if(endA||endB)return endA==endB;if(a[iA++].result!=b[iB++].result)return!1}}function makeAttrs(id,selected){return{"aria-autocomplete":"list","aria-expanded":"true","aria-activedescendant":id+"-"+selected,"aria-controls":id}}function cmpOption(a,b){let dScore=b.match[0]-a.match[0];return dScore?dScore:a.completion.label.localeCompare(b.completion.label)}function getUserEvent(tr){return tr.isUserEvent("input.type")?"input":tr.isUserEvent("delete.backward")?"delete":null}/// Returns a command that moves the completion selection forward or
/// backward by the given amount.
function moveCompletionSelection(forward,by="option"){return view=>{let cState=view.state.field(completionState,!1);if(!cState||!cState.open||Date.now()-cState.open.timestamp<CompletionInteractMargin)return!1;let tooltip,step=1;"page"==by&&(tooltip=view.dom.querySelector(".cm-tooltip-autocomplete"))&&(step=Math.max(2,Math.floor(tooltip.offsetHeight/tooltip.firstChild.offsetHeight)));let selected=cState.open.selected+step*(forward?1:-1),{length}=cState.open.options;return 0>selected?selected="page"==by?0:length-1:selected>=length&&(selected="page"==by?length-1:0),view.dispatch({effects:setSelectedEffect.of(selected)}),!0}}/// Accept the current completion.
function fieldSelection(ranges,field){return state.EditorSelection.create(ranges.filter(r=>r.field==field).map(r=>state.EditorSelection.range(r.from,r.to)))}/// Convert a snippet template to a function that can apply it.
/// Snippets are written using syntax like this:
///
///     "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"
///
/// Each `${}` placeholder (you may also use `#{}`) indicates a field
/// that the user can fill in. Its name, if any, will be the default
/// content for the field.
///
/// When the snippet is activated by calling the returned function,
/// the code is inserted at the given position. Newlines in the
/// template are indented by the indentation of the start line, plus
/// one [indent unit](#language.indentUnit) per tab character after
/// the newline.
///
/// On activation, (all instances of) the first field are selected.
/// The user can move between fields with Tab and Shift-Tab as long as
/// the fields are active. Moving to the last field or moving the
/// cursor out of the current field deactivates the fields.
///
/// The order of fields defaults to textual order, but you can add
/// numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
/// a custom order.
function snippet(template){let snippet=Snippet.parse(template);return(editor,_completion,from,to)=>{let{text,ranges}=snippet.instantiate(editor.state,from),spec={changes:{from,to,insert:state.Text.of(text)}};if(ranges.length&&(spec.selection=fieldSelection(ranges,0)),1<ranges.length){let active=new ActiveSnippet(ranges,0),effects=spec.effects=[setActive.of(active)];void 0===editor.state.field(snippetState,!1)&&effects.push(state.StateEffect.appendConfig.of([snippetState,addSnippetKeymap,snippetPointerHandler,baseTheme]))}editor.dispatch(editor.state.update(spec))}}function moveField(dir){return({state,dispatch})=>{let active=state.field(snippetState,!1);if(!active||0>dir&&0==active.active)return!1;let next=active.active+dir,last=0<dir&&!active.ranges.some(r=>r.field==next+dir);return dispatch(state.update({selection:fieldSelection(active.ranges,next),effects:setActive.of(last?null:new ActiveSnippet(active.ranges,next))})),!0}}/// A command that clears the active snippet, if any.
function wordRE(wordChars){let escaped=wordChars.replace(/[\\[.+*?(){|^$]/g,"\\$&");try{return new RegExp(`[\\p{Alphabetic}\\p{Number}_${escaped}]+`,"ug")}catch(_a){return new RegExp(`[\w${escaped}]`,"g")}}function mapRE(re,f){return new RegExp(f(re.source),re.unicode?"u":"")}function wordCache(wordChars){return wordCaches[wordChars]||(wordCaches[wordChars]=new WeakMap)}function storeWords(doc,wordRE,result,seen,ignoreAt){for(let lines=doc.iterLines(),pos=0;!lines.next().done;){let m,{value}=lines;for(wordRE.lastIndex=0;m=wordRE.exec(value);)if(!seen[m[0]]&&pos+m.index!=ignoreAt&&(result.push({type:"text",label:m[0]}),seen[m[0]]=!0,2e3<=result.length/* MaxList */))return;pos+=value.length+1}}function collectWords(doc,cache,wordRE,to,ignoreAt){let big=1e3<=doc.length/* MinCacheLen */,cached=big&&cache.get(doc);if(cached)return cached;let result=[],seen=Object.create(null);if(doc.children){let pos=0;for(let ch of doc.children){if(1e3<=ch.length/* MinCacheLen */)for(let c of collectWords(ch,cache,wordRE,to-pos,ignoreAt-pos))seen[c.label]||(seen[c.label]=!0,result.push(c));else storeWords(ch,wordRE,result,seen,ignoreAt-pos);pos+=ch.length+1}}else storeWords(doc,wordRE,result,seen,ignoreAt);return big&&2e3>result.length/* MaxList */&&cache.set(doc,result),result}/// A completion source that will scan the document for words (using a
/// [character categorizer](#state.EditorState.charCategorizer)), and
/// return those as completions.
Object.defineProperty(exports,"__esModule",{value:!0});var state=await require("@codemirror/state"),view=await require("@codemirror/view"),tooltip=await require("@codemirror/tooltip"),language=await require("@codemirror/language"),text=await require("@codemirror/text");/// An instance of this is passed to completion source functions.
class CompletionContext{/// Create a new completion context. (Mostly useful for testing
/// completion sources—in the editor, the extension will create
/// these for you.)
constructor(/// The editor state that the completion happens in.
state,/// The position at which the completion is happening.
pos,/// Indicates whether completion was activated explicitly, or
/// implicitly by typing. The usual way to respond to this is to
/// only return completions when either there is part of a
/// completable entity before the cursor, or `explicit` is true.
explicit){this.state=state,this.pos=pos,this.explicit=explicit,this.abortListeners=[]}/// Get the extent, content, and (if there is a token) type of the
/// token before `this.pos`.
tokenBefore(types){let token=language.syntaxTree(this.state).resolveInner(this.pos,-1);for(;token&&0>types.indexOf(token.name);)token=token.parent;return token?{from:token.from,to:this.pos,text:this.state.sliceDoc(token.from,this.pos),type:token.type}:null}/// Get the match of the given expression directly before the
/// cursor.
matchBefore(expr){let line=this.state.doc.lineAt(this.pos),start=Math.max(line.from,this.pos-250),str=line.text.slice(start-line.from,this.pos-line.from),found=str.search(ensureAnchor(expr,!1));return 0>found?null:{from:start+found,to:this.pos,text:str.slice(found)}}/// Yields true when the query has been aborted. Can be useful in
/// asynchronous queries to avoid doing work that will be ignored.
get aborted(){return null==this.abortListeners}/// Allows you to register abort handlers, which will be called when
/// the query is
/// [aborted](#autocomplete.CompletionContext.aborted).
addEventListener(type,listener){"abort"==type&&this.abortListeners&&this.abortListeners.push(listener)}}class Option{constructor(completion,source,match){this.completion=completion,this.source=source,this.match=match}}const pickedCompletion=state.Annotation.define(),SourceCache=new WeakMap;class FuzzyMatcher{constructor(pattern){this.pattern=pattern,this.chars=[],this.folded=[],this.any=[],this.precise=[],this.byWord=[];for(let p=0;p<pattern.length;){let char=text.codePointAt(pattern,p),size=text.codePointSize(char);this.chars.push(char);let part=pattern.slice(p,p+size),upper=part.toUpperCase();this.folded.push(text.codePointAt(upper==part?part.toLowerCase():upper,0)),p+=size}this.astral=pattern.length!=this.chars.length}// Matches a given word (completion) against the pattern (input).
// Will return null for no match, and otherwise an array that starts
// with the match score, followed by any number of `from, to` pairs
// indicating the matched parts of `word`.
//
// The score is a number that is more negative the worse the match
// is. See `Penalty` above.
match(word){if(0==this.pattern.length)return[0];if(word.length<this.pattern.length)return null;let{chars,folded,any,precise,byWord}=this;// For single-character queries, only match when they occur right
// at the start
if(1==chars.length){let first=text.codePointAt(word,0);return first==chars[0]?[0,0,text.codePointSize(first)]:first==folded[0]?[-200/* CaseFold */,0,text.codePointSize(first)]:null}let direct=word.indexOf(this.pattern);if(0==direct)return[0,0,this.pattern.length];let len=chars.length,anyTo=0;if(0>direct){for(let next,i=0,e=Math.min(word.length,200);i<e&&anyTo<len;)next=text.codePointAt(word,i),(next==chars[anyTo]||next==folded[anyTo])&&(any[anyTo++]=i),i+=text.codePointSize(next);// No match, exit immediately
if(anyTo<len)return null}// This tracks the extent of the precise (non-folded, not
// necessarily adjacent) match
let preciseTo=0,byWordTo=0,byWordFolded=!1,adjacentTo=0,adjacentStart=-1,adjacentEnd=-1,hasLower=/[a-z]/.test(word),wordAdjacent=!0;// Tracks whether there is a match that hits only characters that
// appear to be starting words. `byWordFolded` is set to true when
// a case folded character is encountered in such a match
// Go over the option's text, scanning for the various kinds of matches
for(let next,i=0,e=Math.min(word.length,200),prevType=0/* NonWord */;i<e&&byWordTo<len;){next=text.codePointAt(word,i),0>direct&&(preciseTo<len&&next==chars[preciseTo]&&(precise[preciseTo++]=i),adjacentTo<len&&(next==chars[adjacentTo]||next==folded[adjacentTo]?(0==adjacentTo&&(adjacentStart=i),adjacentEnd=i+1,adjacentTo++):adjacentTo=0));let ch,type=255>next?48<=next&&57>=next||97<=next&&122>=next?2/* Lower */:65<=next&&90>=next?1/* Upper */:0/* NonWord */:(ch=text.fromCodePoint(next))==ch.toLowerCase()?ch==ch.toUpperCase()?0:2/* Lower */:1/* Upper */ /* NonWord */;(!i||1==type/* Upper */&&hasLower||0==prevType/* NonWord */&&0!=type/* NonWord */)&&(chars[byWordTo]==next||folded[byWordTo]==next&&(byWordFolded=!0)?byWord[byWordTo++]=i:byWord.length&&(wordAdjacent=!1)),prevType=type,i+=text.codePointSize(next)}return byWordTo==len&&0==byWord[0]&&wordAdjacent?this.result(-100/* ByWord */+(byWordFolded?-200/* CaseFold */:0),byWord,word):adjacentTo==len&&0==adjacentStart?[-200/* CaseFold */-word.length,0,adjacentEnd]:-1<direct?[-700/* NotStart */-word.length,direct,direct+this.pattern.length]:adjacentTo==len?[-900/* NotStart */-word.length,adjacentStart,adjacentEnd]:byWordTo==len?this.result(-100/* ByWord */+(byWordFolded?-200/* CaseFold */:0)+-700/* NotStart */+(wordAdjacent?0:-1100/* Gap */),byWord,word):2==chars.length?null:this.result((any[0]?-700/* NotStart */:0)+-200/* CaseFold */+-1100/* Gap */,any,word)}result(score,positions,word){let result=[score-word.length],i=1;for(let pos of positions){let to=pos+(this.astral?text.codePointSize(text.codePointAt(word,pos)):1);1<i&&result[i-1]==pos?result[i-1]=to:(result[i++]=pos,result[i++]=to)}return result}}const completionConfig=state.Facet.define({combine(configs){return state.combineConfig(configs,{activateOnTyping:!0,override:null,maxRenderedOptions:100,defaultKeymap:!0,optionClass:()=>"",aboveCursor:!1,icons:!0,addToOptions:[]},{defaultKeymap:(a,b)=>a&&b,icons:(a,b)=>a&&b,optionClass:(a,b)=>c=>joinClass(a(c),b(c)),addToOptions:(a,b)=>a.concat(b)})}});class CompletionTooltip{constructor(view,stateField){this.view=view,this.stateField=stateField,this.info=null,this.placeInfo={read:()=>this.measureInfo(),write:pos=>this.positionInfo(pos),key:this};let cState=view.state.field(stateField),{options,selected}=cState.open,config=view.state.facet(completionConfig);this.optionContent=optionContent(config),this.optionClass=config.optionClass,this.range=rangeAroundSelected(options.length,selected,config.maxRenderedOptions),this.dom=document.createElement("div"),this.dom.className="cm-tooltip-autocomplete",this.dom.addEventListener("mousedown",e=>{for(let match,dom=e.target;dom&&dom!=this.dom;dom=dom.parentNode)if("LI"==dom.nodeName&&(match=/-(\d+)$/.exec(dom.id))&&+match[1]<options.length)return applyCompletion(view,options[+match[1]]),void e.preventDefault()}),this.list=this.dom.appendChild(this.createListBox(options,cState.id,this.range)),this.list.addEventListener("scroll",()=>{this.info&&this.view.requestMeasure(this.placeInfo)})}mount(){this.updateSel()}update(update){update.state.field(this.stateField)!=update.startState.field(this.stateField)&&this.updateSel()}positioned(){this.info&&this.view.requestMeasure(this.placeInfo)}updateSel(){let cState=this.view.state.field(this.stateField),open=cState.open;if((open.selected<this.range.from||open.selected>=this.range.to)&&(this.range=rangeAroundSelected(open.options.length,open.selected,this.view.state.facet(completionConfig).maxRenderedOptions),this.list.remove(),this.list=this.dom.appendChild(this.createListBox(open.options,cState.id,this.range)),this.list.addEventListener("scroll",()=>{this.info&&this.view.requestMeasure(this.placeInfo)})),this.updateSelectedOption(open.selected)){this.info&&(this.info.remove(),this.info=null);let option=open.options[open.selected];option.completion.info&&(this.info=this.dom.appendChild(createInfoDialog(option,this.view)),this.view.requestMeasure(this.placeInfo))}}updateSelectedOption(selected){let set=null;for(let opt=this.list.firstChild,i=this.range.from;opt;opt=opt.nextSibling,i++)i==selected?opt.hasAttribute("aria-selected")||(opt.setAttribute("aria-selected","true"),set=opt):opt.hasAttribute("aria-selected")&&opt.removeAttribute("aria-selected");return set&&scrollIntoView(this.list,set),set}measureInfo(){let sel=this.dom.querySelector("[aria-selected]");if(!sel||!this.info)return null;let listRect=this.dom.getBoundingClientRect(),infoRect=this.info.getBoundingClientRect(),selRect=sel.getBoundingClientRect();if(selRect.top>Math.min(innerHeight,listRect.bottom)-10||selRect.bottom<Math.max(0,listRect.top)+10)return null;let top=Math.max(0,Math.min(selRect.top,innerHeight-infoRect.height))-listRect.top,left=this.view.textDirection==view.Direction.RTL,spaceLeft=listRect.left,spaceRight=innerWidth-listRect.right;return left&&spaceLeft<Math.min(infoRect.width,spaceRight)?left=!1:!left&&spaceRight<Math.min(infoRect.width,spaceLeft)&&(left=!0),{top,left}}positionInfo(pos){this.info&&(this.info.style.top=(pos?pos.top:-1e6)+"px",pos&&(this.info.classList.toggle("cm-completionInfo-left",pos.left),this.info.classList.toggle("cm-completionInfo-right",!pos.left)))}createListBox(options,id,range){const ul=document.createElement("ul");ul.id=id,ul.setAttribute("role","listbox");for(let i=range.from;i<range.to;i++){let{completion,match}=options[i];const li=ul.appendChild(document.createElement("li"));li.id=id+"-"+i,li.setAttribute("role","option");let cls=this.optionClass(completion);cls&&(li.className=cls);for(let source of this.optionContent){let node=source(completion,this.view.state,match);node&&li.appendChild(node)}}return range.from&&ul.classList.add("cm-completionListIncompleteTop"),range.to<options.length&&ul.classList.add("cm-completionListIncompleteBottom"),ul}}const MaxOptions=300;class CompletionDialog{constructor(options,attrs,tooltip,timestamp,selected){this.options=options,this.attrs=attrs,this.tooltip=tooltip,this.timestamp=timestamp,this.selected=selected}setSelected(selected,id){return selected==this.selected||selected>=this.options.length?this:new CompletionDialog(this.options,makeAttrs(id,selected),this.tooltip,this.timestamp,selected)}static build(active,state,id,prev,conf){let options=sortOptions(active,state);if(!options.length)return null;let selected=0;if(prev&&prev.selected){let selectedValue=prev.options[prev.selected].completion;for(let i=0;i<options.length&&!selected;i++)options[i].completion==selectedValue&&(selected=i)}return new CompletionDialog(options,makeAttrs(id,selected),{pos:active.reduce((a,b)=>b.hasResult()?Math.min(a,b.from):a,1e8),create:completionTooltip(completionState),above:conf.aboveCursor},prev?prev.timestamp:Date.now(),selected)}map(changes){return new CompletionDialog(this.options,this.attrs,Object.assign(Object.assign({},this.tooltip),{pos:changes.mapPos(this.tooltip.pos)}),this.timestamp,this.selected)}}class CompletionState{constructor(active,id,open){this.active=active,this.id=id,this.open=open}static start(){return new CompletionState(none,"cm-ac-"+Math.floor(2e6*Math.random()).toString(36),null)}update(tr){let{state}=tr,conf=state.facet(completionConfig),sources=conf.override||state.languageDataAt("autocomplete",cur(state)).map(asSource),active=sources.map(source=>{let value=this.active.find(s=>s.source==source)||new ActiveSource(source,this.active.some(a=>0!=a.state/* Inactive */)?1/* Pending */:0/* Inactive */);return value.update(tr,conf)});active.length==this.active.length&&active.every((a,i)=>a==this.active[i])&&(active=this.active);let open=tr.selection||active.some(a=>a.hasResult()&&tr.changes.touchesRange(a.from,a.to))||!sameResults(active,this.active)?CompletionDialog.build(active,state,this.id,this.open,conf):this.open&&tr.docChanged?this.open.map(tr.changes):this.open;!open&&active.every(a=>1!=a.state/* Pending */)&&active.some(a=>a.hasResult())&&(active=active.map(a=>a.hasResult()?new ActiveSource(a.source,0/* Inactive */):a));for(let effect of tr.effects)effect.is(setSelectedEffect)&&(open=open&&open.setSelected(effect.value,this.id));return active==this.active&&open==this.open?this:new CompletionState(active,this.id,open)}get tooltip(){return this.open?this.open.tooltip:null}get attrs(){return this.open?this.open.attrs:baseAttrs}}const baseAttrs={"aria-autocomplete":"list","aria-expanded":"false"},none=[];class ActiveSource{constructor(source,state,explicitPos=-1){this.source=source,this.state=state,this.explicitPos=explicitPos}hasResult(){return!1}update(tr,conf){let event=getUserEvent(tr),value=this;event?value=value.handleUserEvent(tr,event,conf):tr.docChanged?value=value.handleChange(tr):tr.selection&&0!=value.state/* Inactive */&&(value=new ActiveSource(value.source,0/* Inactive */));for(let effect of tr.effects)if(effect.is(startCompletionEffect))value=new ActiveSource(value.source,1/* Pending */,effect.value?cur(tr.state):-1);else if(effect.is(closeCompletionEffect))value=new ActiveSource(value.source,0/* Inactive */);else if(effect.is(setActiveEffect))for(let active of effect.value)active.source==value.source&&(value=active);return value}handleUserEvent(tr,type,conf){return"delete"!=type&&conf.activateOnTyping?new ActiveSource(this.source,1/* Pending */):this.map(tr.changes)}handleChange(tr){return tr.changes.touchesRange(cur(tr.startState))?new ActiveSource(this.source,0/* Inactive */):this.map(tr.changes)}map(changes){return changes.empty||0>this.explicitPos?this:new ActiveSource(this.source,this.state,changes.mapPos(this.explicitPos))}}class ActiveResult extends ActiveSource{constructor(source,explicitPos,result,from,to,span){super(source,2/* Result */,explicitPos),this.result=result,this.from=from,this.to=to,this.span=span}hasResult(){return!0}handleUserEvent(tr,type,conf){let from=tr.changes.mapPos(this.from),to=tr.changes.mapPos(this.to,1),pos=cur(tr.state);if((-1<this.explicitPos?pos<from:pos<=from)||pos>to)return new ActiveSource(this.source,"input"==type&&conf.activateOnTyping?1/* Pending */:0/* Inactive */);let explicitPos=0>this.explicitPos?-1:tr.changes.mapPos(this.explicitPos);return this.span&&(from==to||this.span.test(tr.state.sliceDoc(from,to)))?new ActiveResult(this.source,explicitPos,this.result,from,to,this.span):new ActiveSource(this.source,1/* Pending */,explicitPos)}handleChange(tr){return tr.changes.touchesRange(this.from,this.to)?new ActiveSource(this.source,0/* Inactive */):this.map(tr.changes)}map(mapping){return mapping.empty?this:new ActiveResult(this.source,0>this.explicitPos?-1:mapping.mapPos(this.explicitPos),this.result,mapping.mapPos(this.from),mapping.mapPos(this.to,1),this.span)}}const startCompletionEffect=state.StateEffect.define(),closeCompletionEffect=state.StateEffect.define(),setActiveEffect=state.StateEffect.define({map(sources,mapping){return sources.map(s=>s.map(mapping))}}),setSelectedEffect=state.StateEffect.define(),completionState=state.StateField.define({create(){return CompletionState.start()},update(value,tr){return value.update(tr)},provide:f=>[tooltip.showTooltip.from(f,val=>val.tooltip),view.EditorView.contentAttributes.from(f,state=>state.attrs)]}),CompletionInteractMargin=75,acceptCompletion=view=>{let cState=view.state.field(completionState,!1);return!view.state.readOnly&&cState&&cState.open&&!(Date.now()-cState.open.timestamp<CompletionInteractMargin)&&(applyCompletion(view,cState.open.options[cState.open.selected]),!0)},startCompletion=view=>{let cState=view.state.field(completionState,!1);return!!cState&&(view.dispatch({effects:startCompletionEffect.of(!0)}),!0)},closeCompletion=view=>{let cState=view.state.field(completionState,!1);return!!(cState&&cState.active.some(a=>0!=a.state/* Inactive */))&&(view.dispatch({effects:closeCompletionEffect.of(null)}),!0)};class RunningQuery{constructor(active,context){this.active=active,this.context=context,this.time=Date.now(),this.updates=[],this.done=void 0}}const DebounceTime=50,completionPlugin=view.ViewPlugin.fromClass(class{constructor(view){this.view=view,this.debounceUpdate=-1,this.running=[],this.debounceAccept=-1,this.composing=0/* None */;for(let active of view.state.field(completionState).active)1==active.state/* Pending */&&this.startQuery(active)}update(update){let cState=update.state.field(completionState);if(update.selectionSet||update.docChanged||update.startState.field(completionState)!=cState){let doesReset=update.transactions.some(tr=>(tr.selection||tr.docChanged)&&!getUserEvent(tr));for(let query,i=0;i<this.running.length;i++)if(query=this.running[i],doesReset||query.updates.length+update.transactions.length>50&&query.time-Date.now()>1e3){for(let handler of query.context.abortListeners)try{handler()}catch(e){view.logException(this.view.state,e)}query.context.abortListeners=null,this.running.splice(i--,1)}else query.updates.push(...update.transactions);if(-1<this.debounceUpdate&&clearTimeout(this.debounceUpdate),this.debounceUpdate=cState.active.some(a=>1==a.state/* Pending */&&!this.running.some(q=>q.active.source==a.source))?setTimeout(()=>this.startUpdate(),DebounceTime):-1,0!=this.composing/* None */)for(let tr of update.transactions)"input"==getUserEvent(tr)?this.composing=2/* Changed */:2==this.composing/* Changed */&&tr.selection&&(this.composing=3/* ChangedAndMoved */)}}startUpdate(){this.debounceUpdate=-1;let{state}=this.view,cState=state.field(completionState);for(let active of cState.active)1!=active.state/* Pending */||this.running.some(r=>r.active.source==active.source)||this.startQuery(active)}startQuery(active){let{state}=this.view,pos=cur(state),context=new CompletionContext(state,pos,active.explicitPos==pos),pending=new RunningQuery(active,context);this.running.push(pending),Promise.resolve(active.source(context)).then(result=>{pending.context.aborted||(pending.done=result||null,this.scheduleAccept())},err=>{this.view.dispatch({effects:closeCompletionEffect.of(null)}),view.logException(this.view.state,err)})}scheduleAccept(){this.running.every(q=>void 0!==q.done)?this.accept():0>this.debounceAccept&&(this.debounceAccept=setTimeout(()=>this.accept(),DebounceTime))}// For each finished query in this.running, try to create a result
// or, if appropriate, restart the query.
accept(){var _a;-1<this.debounceAccept&&clearTimeout(this.debounceAccept),this.debounceAccept=-1;let updated=[],conf=this.view.state.facet(completionConfig);for(let query,i=0;i<this.running.length;i++){if(query=this.running[i],void 0===query.done)continue;if(this.running.splice(i--,1),query.done){let active=new ActiveResult(query.active.source,query.active.explicitPos,query.done,query.done.from,null!==(_a=query.done.to)&&void 0!==_a?_a:cur(query.updates.length?query.updates[0].startState:this.view.state),query.done.span&&!1!==query.done.filter?ensureAnchor(query.done.span,!0):null);// Replay the transactions that happened since the start of
// the request and see if that preserves the result
for(let tr of query.updates)active=active.update(tr,conf);if(active.hasResult()){updated.push(active);continue}}let current=this.view.state.field(completionState).active.find(a=>a.source==query.active.source);if(current&&1==current.state/* Pending */)if(null==query.done){// Explicitly failed. Should clear the pending status if it
// hasn't been re-set in the meantime.
let active=new ActiveSource(query.active.source,0/* Inactive */);for(let tr of query.updates)active=active.update(tr,conf);1!=active.state/* Pending */&&updated.push(active)}else// Cleared by subsequent transactions. Restart.
this.startQuery(current)}updated.length&&this.view.dispatch({effects:setActiveEffect.of(updated)})}},{eventHandlers:{compositionstart(){this.composing=1/* Started */},compositionend(){3==this.composing/* ChangedAndMoved */&&setTimeout(()=>this.view.dispatch({effects:startCompletionEffect.of(!1)}),20),this.composing=0/* None */}}}),baseTheme=view.EditorView.baseTheme({".cm-tooltip.cm-tooltip-autocomplete":{"& > ul":{fontFamily:"monospace",whiteSpace:"nowrap",overflow:"hidden auto",maxWidth_fallback:"700px",maxWidth:"min(700px, 95vw)",minWidth:"250px",maxHeight:"10em",listStyle:"none",margin:0,padding:0,"& > li":{overflowX:"hidden",textOverflow:"ellipsis",cursor:"pointer",padding:"1px 3px",lineHeight:1.2}}},"&light .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#39e",color:"white"},"&dark .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#347",color:"white"},".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after":{content:"\"\xB7\xB7\xB7\"",opacity:.5,display:"block",textAlign:"center"},".cm-tooltip.cm-completionInfo":{position:"absolute",padding:"3px 9px",width:"max-content",maxWidth:"300px"},".cm-completionInfo.cm-completionInfo-left":{right:"100%"},".cm-completionInfo.cm-completionInfo-right":{left:"100%"},"&light .cm-snippetField":{backgroundColor:"#00000022"},"&dark .cm-snippetField":{backgroundColor:"#ffffff22"},".cm-snippetFieldPosition":{verticalAlign:"text-top",width:0,height:"1.15em",margin:"0 -0.7px -.7em",borderLeft:"1.4px dotted #888"},".cm-completionMatchedText":{textDecoration:"underline"},".cm-completionDetail":{marginLeft:"0.5em",fontStyle:"italic"},".cm-completionIcon":{fontSize:"90%",width:".8em",display:"inline-block",textAlign:"center",paddingRight:".6em",opacity:"0.6"},".cm-completionIcon-function, .cm-completionIcon-method":{"&:after":{content:"'\u0192'"}},".cm-completionIcon-class":{"&:after":{content:"'\u25CB'"}},".cm-completionIcon-interface":{"&:after":{content:"'\u25CC'"}},".cm-completionIcon-variable":{"&:after":{content:"'\uD835\uDC65'"}},".cm-completionIcon-constant":{"&:after":{content:"'\uD835\uDC36'"}},".cm-completionIcon-type":{"&:after":{content:"'\uD835\uDC61'"}},".cm-completionIcon-enum":{"&:after":{content:"'\u222A'"}},".cm-completionIcon-property":{"&:after":{content:"'\u25A1'"}},".cm-completionIcon-keyword":{"&:after":{content:"'\uD83D\uDD11\uFE0E'"}// Disable emoji rendering
},".cm-completionIcon-namespace":{"&:after":{content:"'\u25A2'"}},".cm-completionIcon-text":{"&:after":{content:"'abc'",fontSize:"50%",verticalAlign:"middle"}}});class FieldPos{constructor(field,line,from,to){this.field=field,this.line=line,this.from=from,this.to=to}}class FieldRange{constructor(field,from,to){this.field=field,this.from=from,this.to=to}map(changes){return new FieldRange(this.field,changes.mapPos(this.from,-1),changes.mapPos(this.to,1))}}class Snippet{constructor(lines,fieldPositions){this.lines=lines,this.fieldPositions=fieldPositions}instantiate(state,pos){let text=[],lineStart=[pos],lineObj=state.doc.lineAt(pos),baseIndent=/^\s*/.exec(lineObj.text)[0];for(let line of this.lines){if(text.length){let indent=baseIndent,tabs=/^\t*/.exec(line)[0].length;for(let i=0;i<tabs;i++)indent+=state.facet(language.indentUnit);lineStart.push(pos+indent.length-tabs),line=indent+line.slice(tabs)}text.push(line),pos+=line.length+1}let ranges=this.fieldPositions.map(pos=>new FieldRange(pos.field,lineStart[pos.line]+pos.from,lineStart[pos.line]+pos.to));return{text,ranges}}static parse(template){let m,fields=[],lines=[],positions=[];for(let line of template.split(/\r\n?|\n/)){for(;m=/[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line);){let seq=m[1]?+m[1]:null,name=m[2]||m[3]||"",found=-1;for(let i=0;i<fields.length;i++)(null==seq?!!name&&fields[i].name==name:fields[i].seq==seq)&&(found=i);if(0>found){let i=0;for(;i<fields.length&&(null==seq||null!=fields[i].seq&&fields[i].seq<seq);)i++;fields.splice(i,0,{seq,name}),found=i;for(let pos of positions)pos.field>=found&&pos.field++}positions.push(new FieldPos(found,lines.length,m.index,m.index+name.length)),line=line.slice(0,m.index)+name+line.slice(m.index+m[0].length)}lines.push(line)}return new Snippet(lines,positions)}}let fieldMarker=view.Decoration.widget({widget:new class extends view.WidgetType{toDOM(){let span=document.createElement("span");return span.className="cm-snippetFieldPosition",span}ignoreEvent(){return!1}}}),fieldRange=view.Decoration.mark({class:"cm-snippetField"});class ActiveSnippet{constructor(ranges,active){this.ranges=ranges,this.active=active,this.deco=view.Decoration.set(ranges.map(r=>(r.from==r.to?fieldMarker:fieldRange).range(r.from,r.to)))}map(changes){return new ActiveSnippet(this.ranges.map(r=>r.map(changes)),this.active)}selectionInsideField(sel){return sel.ranges.every(range=>this.ranges.some(r=>r.field==this.active&&r.from<=range.from&&r.to>=range.to))}}const setActive=state.StateEffect.define({map(value,changes){return value&&value.map(changes)}}),moveToField=state.StateEffect.define(),snippetState=state.StateField.define({create(){return null},update(value,tr){for(let effect of tr.effects){if(effect.is(setActive))return effect.value;if(effect.is(moveToField)&&value)return new ActiveSnippet(value.ranges,effect.value)}return value&&tr.docChanged&&(value=value.map(tr.changes)),value&&tr.selection&&!value.selectionInsideField(tr.selection)&&(value=null),value},provide:f=>view.EditorView.decorations.from(f,val=>val?val.deco:view.Decoration.none)}),clearSnippet=({state,dispatch})=>{let active=state.field(snippetState,!1);return!!active&&(dispatch(state.update({effects:setActive.of(null)})),!0)},nextSnippetField=moveField(1),prevSnippetField=moveField(-1),defaultSnippetKeymap=[{key:"Tab",run:nextSnippetField,shift:prevSnippetField},{key:"Escape",run:clearSnippet}],snippetKeymap=state.Facet.define({combine(maps){return maps.length?maps[0]:defaultSnippetKeymap}}),addSnippetKeymap=state.Prec.highest(view.keymap.compute([snippetKeymap],state=>state.facet(snippetKeymap))),snippetPointerHandler=view.EditorView.domEventHandlers({mousedown(event,view){let pos,active=view.state.field(snippetState,!1);if(!active||null==(pos=view.posAtCoords({x:event.clientX,y:event.clientY})))return!1;let match=active.ranges.find(r=>r.from<=pos&&r.to>=pos);return!!(match&&match.field!=active.active)&&(view.dispatch({selection:fieldSelection(active.ranges,match.field),effects:setActive.of(active.ranges.some(r=>r.field>match.field)?new ActiveSnippet(active.ranges,match.field):null)}),!0)}}),wordCaches=Object.create(null),completionKeymap=[{key:"Ctrl-Space",run:startCompletion},{key:"Escape",run:closeCompletion},{key:"ArrowDown",run:moveCompletionSelection(!0)},{key:"ArrowUp",run:moveCompletionSelection(!1)},{key:"PageDown",run:moveCompletionSelection(!0,"page")},{key:"PageUp",run:moveCompletionSelection(!1,"page")},{key:"Enter",run:acceptCompletion}],completionKeymapExt=state.Prec.highest(view.keymap.computeN([completionConfig],state=>state.facet(completionConfig).defaultKeymap?[completionKeymap]:[]));return exports.CompletionContext=CompletionContext,exports.acceptCompletion=acceptCompletion,exports.autocompletion=/// Returns an extension that enables autocompletion.
function(config={}){return[completionState,completionConfig.of(config),completionPlugin,completionKeymapExt,baseTheme]}/// Basic keybindings for autocompletion.
///
///  - Ctrl-Space: [`startCompletion`](#autocomplete.startCompletion)
///  - Escape: [`closeCompletion`](#autocomplete.closeCompletion)
///  - ArrowDown: [`moveCompletionSelection`](#autocomplete.moveCompletionSelection)`(true)`
///  - ArrowUp: [`moveCompletionSelection`](#autocomplete.moveCompletionSelection)`(false)`
///  - PageDown: [`moveCompletionSelection`](#autocomplete.moveCompletionSelection)`(true, "page")`
///  - PageDown: [`moveCompletionSelection`](#autocomplete.moveCompletionSelection)`(true, "page")`
///  - Enter: [`acceptCompletion`](#autocomplete.acceptCompletion)
,exports.clearSnippet=clearSnippet,exports.closeCompletion=closeCompletion,exports.completeAnyWord=context=>{let wordChars=context.state.languageDataAt("wordChars",context.pos).join(""),re=wordRE(wordChars),token=context.matchBefore(mapRE(re,s=>s+"$"));if(!token&&!context.explicit)return null;let from=token?token.from:context.pos,options=collectWords(context.state.doc,wordCache(wordChars),re,5e4/* Range */,from);return{from,options,span:mapRE(re,s=>"^"+s)}},exports.completeFromList=completeFromList,exports.completionKeymap=completionKeymap,exports.completionStatus=/// Get the current completion status. When completions are available,
/// this will return `"active"`. When completions are pending (in the
/// process of being queried), this returns `"pending"`. Otherwise, it
/// returns `null`.
function(state){let cState=state.field(completionState,!1);return cState&&cState.active.some(a=>1==a.state/* Pending */)?"pending":cState&&cState.active.some(a=>0!=a.state/* Inactive */)?"active":null}/// Returns the available completions as an array.
,exports.currentCompletions=function(state){var _a;let open=null===(_a=state.field(completionState,!1))||void 0===_a?void 0:_a.open;return open?open.options.map(o=>o.completion):[]}/// Return the currently selected completion, if any.
,exports.ifIn=function(nodes,source){return context=>{for(let pos=language.syntaxTree(context.state).resolveInner(context.pos,-1);pos;pos=pos.parent)if(-1<nodes.indexOf(pos.name))return source(context);return null}}/// Wrap the given completion source so that it will not fire when the
/// cursor is in a syntax node with one of the given names.
,exports.ifNotIn=function(nodes,source){return context=>{for(let pos=language.syntaxTree(context.state).resolveInner(context.pos,-1);pos;pos=pos.parent)if(-1<nodes.indexOf(pos.name))return null;return source(context)}},exports.moveCompletionSelection=moveCompletionSelection,exports.nextSnippetField=nextSnippetField,exports.pickedCompletion=pickedCompletion,exports.prevSnippetField=prevSnippetField,exports.selectedCompletion=function(state){var _a;let open=null===(_a=state.field(completionState,!1))||void 0===_a?void 0:_a.open;return open?open.options[open.selected].completion:null},exports.snippet=snippet,exports.snippetCompletion=/// Create a completion from a snippet. Returns an object with the
/// properties from `completion`, plus an `apply` function that
/// applies the snippet.
function(template,completion){return Object.assign(Object.assign({},completion),{apply:snippet(template)})},exports.snippetKeymap=snippetKeymap,exports.startCompletion=startCompletion,exports}