async function moduleInitFunction(require,exports={}){function tokenString(stream,state){for(var current,prev,found_var=!1;!stream.eol()&&(current=stream.next())!=state.pending;){if("$"===current&&"\\"!=prev&&"\""==state.pending){found_var=!0;break}prev=current}return found_var&&stream.backUp(1),state.continueString=current!=state.pending,"string"}function tokenize(stream,state){var ch=stream.next();// Have we found a variable?
return"$"===ch?stream.match(variable_regex)?"variableName.special":"variable":state.continueString?(stream.backUp(1),tokenString(stream,state)):stream.match(/(\s+)?\w+\(/)||stream.match(/(\s+)?\w+\ \(/)?(stream.backUp(1),"def"):"#"==ch?(stream.skipToEnd(),"comment"):"'"==ch||"\""==ch?(state.pending=ch,tokenString(stream,state)):"("==ch||")"==ch?"bracket":ch.match(/[0-9]/)?"number":(stream.eatWhile(/[\w-]/),null);// Should we still be looking for the end of a string?
// Do we just have a function on our hands?
// In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched
// Have we found a string?
}Object.defineProperty(exports,"__esModule",{value:!0});var variable_regex=/({)?[a-zA-Z0-9_]+(})?/;return exports.cmake={startState:function(){return{inDefinition:!1,inInclude:!1,continueString:!1,pending:!1}},token:function(stream,state){return stream.eatSpace()?null:tokenize(stream,state)}},exports}