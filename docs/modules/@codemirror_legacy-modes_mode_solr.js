async function moduleInitFunction(require,exports={}){function isNumber(word){return parseFloat(word).toString()===word}function tokenString(quote){return function(stream,state){for(var next,escaped=!1;null!=(next=stream.next())&&(next!=quote||escaped);)escaped=!escaped&&"\\"==next;return escaped||(state.tokenize=tokenBase),"string"}}function tokenOperator(operator){return function(stream,state){return"|"==operator?stream.eat(/\|/):"&"==operator&&stream.eat(/\&/),state.tokenize=tokenBase,"operator"}}function tokenWord(ch){return function(stream,state){for(var word=ch;(ch=stream.peek())&&null!=ch.match(isStringChar);)word+=stream.next();return state.tokenize=tokenBase,isOperatorString.test(word)?"operator":isNumber(word)?"number":":"==stream.peek()?"propertyName":"string"}}function tokenBase(stream,state){var ch=stream.next();return"\""==ch?state.tokenize=tokenString(ch):isOperatorChar.test(ch)?state.tokenize=tokenOperator(ch):isStringChar.test(ch)&&(state.tokenize=tokenWord(ch)),state.tokenize==tokenBase?null:state.tokenize(stream,state)}Object.defineProperty(exports,"__esModule",{value:!0});var isStringChar=/[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/,isOperatorChar=/[\|\!\+\-\*\?\~\^\&]/,isOperatorString=/^(OR|AND|NOT|TO)$/i;return exports.solr={startState:function(){return{tokenize:tokenBase}},token:function(stream,state){return stream.eatSpace()?null:state.tokenize(stream,state)}},exports}