async function moduleInitFunction(require,exports={}){function mkVerilog(parserConfig){function words(str){for(var obj={},words=str.split(" "),i=0;i<words.length;++i)obj[words[i]]=!0;return obj}/**
   * Keywords from IEEE 1800-2012
   */function tokenBase(stream,state){var style,ch=stream.peek();if(hooks[ch]&&!1!=(style=hooks[ch](stream,state)))return style;if(hooks.tokenBase&&!1!=(style=hooks.tokenBase(stream,state)))return style;if(/[,;:\.]/.test(ch))return curPunc=stream.next(),null;if(isBracketChar.test(ch))return curPunc=stream.next(),"bracket";// Macros (tick-defines)
if("`"==ch)return stream.next(),stream.eatWhile(/[\w\$_]/)?"def":null;// System calls
if("$"==ch)return stream.next(),stream.eatWhile(/[\w\$_]/)?"meta":null;// Time literals
if("#"==ch)return stream.next(),stream.eatWhile(/[\d_.]/),"def";// Strings
if("\""==ch)return stream.next(),state.tokenize=tokenString(ch),state.tokenize(stream,state);// Comments
if("/"==ch){if(stream.next(),stream.eat("*"))return state.tokenize=tokenComment,tokenComment(stream,state);if(stream.eat("/"))return stream.skipToEnd(),"comment";stream.backUp(1)}// Numeric literals
if(stream.match(realLiteral)||stream.match(decimalLiteral)||stream.match(binaryLiteral)||stream.match(octLiteral)||stream.match(hexLiteral)||stream.match(unsignedNumber)||stream.match(realLiteral))return"number";// Operators
if(stream.eatWhile(isOperatorChar))return"meta";// Keywords / plain variables
if(stream.eatWhile(/[\w\$_]/)){var cur=stream.current();return keywords[cur]?(openClose[cur]&&(curPunc="newblock"),statementKeywords[cur]&&(curPunc="newstatement"),curKeyword=cur,"keyword"):"variable"}return stream.next(),null}function tokenString(quote){return function(stream,state){for(var next,escaped=!1,end=!1;null!=(next=stream.next());){if(next==quote&&!escaped){end=!0;break}escaped=!escaped&&"\\"==next}return(end||!(escaped||multiLineStrings))&&(state.tokenize=tokenBase),"string"}}function tokenComment(stream,state){for(var ch,maybeEnd=!1;ch=stream.next();){if("/"==ch&&maybeEnd){state.tokenize=tokenBase;break}maybeEnd="*"==ch}return"comment"}function Context(indented,column,type,align,prev){this.indented=indented,this.column=column,this.type=type,this.align=align,this.prev=prev}function pushContext(state,col,type){var indent=state.indented,c=new Context(indent,col,type,null,state.context);return state.context=c}function popContext(state){var t=state.context.type;return(")"==t||"]"==t||"}"==t)&&(state.indented=state.context.indented),state.context=state.context.prev}function isClosing(text,contextClosing){if(text==contextClosing)return!0;// contextClosing may be multiple keywords separated by ;
var closingKeywords=contextClosing.split(";");for(var i in closingKeywords)if(text==closingKeywords[i])return!0;return!1}var curPunc,curKeyword,statementIndentUnit=parserConfig.statementIndentUnit,dontAlignCalls=parserConfig.dontAlignCalls,noIndentKeywords=parserConfig.noIndentKeywords||[],multiLineStrings=parserConfig.multiLineStrings,hooks=parserConfig.hooks||{},keywords=words("accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import incdir include initial inout input inside instance int integer interconnect interface intersect join join_any join_none large let liblist library local localparam logic longint macromodule matches medium modport module nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor"),isOperatorChar=/[\+\-\*\/!~&|^%=?:]/,isBracketChar=/[\[\]{}()]/,unsignedNumber=/\d[0-9_]*/,decimalLiteral=/\d*\s*'s?d\s*\d[0-9_]*/i,binaryLiteral=/\d*\s*'s?b\s*[xz01][xz01_]*/i,octLiteral=/\d*\s*'s?o\s*[xz0-7][xz0-7_]*/i,hexLiteral=/\d*\s*'s?h\s*[0-9a-fxz?][0-9a-fxz?_]*/i,realLiteral=/(\d[\d_]*(\.\d[\d_]*)?E-?[\d_]+)|(\d[\d_]*\.\d[\d_]*)/i,blockKeywords=words("case checker class clocking config function generate interface module package primitive program property specify sequence table task"),openClose={};for(var keyword in blockKeywords)openClose[keyword]="end"+keyword;for(var i in openClose.begin="end",openClose.casex="endcase",openClose.casez="endcase",openClose["do"]="while",openClose.fork="join;join_any;join_none",openClose.covergroup="endgroup",noIndentKeywords){var keyword=noIndentKeywords[i];openClose[keyword]&&(openClose[keyword]=void 0)}// Keywords which open statements that are ended with a semi-colon
var statementKeywords=words("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");// Interface
return{startState:function(indentUnit){var state={tokenize:null,context:new Context(-indentUnit,0,"top",!1),indented:0,startOfLine:!0};return hooks.startState&&hooks.startState(state),state},token:function(stream,state){var ctx=state.context;if(stream.sol()&&(null==ctx.align&&(ctx.align=!1),state.indented=stream.indentation(),state.startOfLine=!0),hooks.token){// Call hook, with an optional return value of a style to override verilog styling.
var style=hooks.token(stream,state);if(void 0!==style)return style}if(stream.eatSpace())return null;curPunc=null,curKeyword=null;var style=(state.tokenize||tokenBase)(stream,state);if("comment"==style||"meta"==style||"variable"==style)return style;if(null==ctx.align&&(ctx.align=!0),curPunc==ctx.type)popContext(state);else if(";"==curPunc&&"statement"==ctx.type||ctx.type&&isClosing(curKeyword,ctx.type))for(ctx=popContext(state);ctx&&"statement"==ctx.type;)ctx=popContext(state);else if("{"==curPunc)pushContext(state,stream.column(),"}");else if("["==curPunc)pushContext(state,stream.column(),"]");else if("("==curPunc)pushContext(state,stream.column(),")");else if(ctx&&"endcase"==ctx.type&&":"==curPunc)pushContext(state,stream.column(),"statement");else if("newstatement"==curPunc)pushContext(state,stream.column(),"statement");else if("newblock"==curPunc)if("function"==curKeyword&&ctx&&("statement"==ctx.type||"endgroup"==ctx.type));else if("task"==curKeyword&&ctx&&"statement"==ctx.type);else{var close=openClose[curKeyword];pushContext(state,stream.column(),close)}return state.startOfLine=!1,style},indent:function(state,textAfter,cx){if(state.tokenize!=tokenBase&&null!=state.tokenize)return null;if(hooks.indent){var fromHook=hooks.indent(state);if(0<=fromHook)return fromHook}var ctx=state.context,firstChar=textAfter&&textAfter.charAt(0);"statement"==ctx.type&&"}"==firstChar&&(ctx=ctx.prev);var closing=!1,possibleClosing=textAfter.match(/^((\w+)|[)}\]])/);return possibleClosing&&(closing=isClosing(possibleClosing[0],ctx.type)),"statement"==ctx.type?ctx.indented+("{"==firstChar?0:statementIndentUnit||cx.unit):/[)}\]]/.test(ctx.type)&&ctx.align&&!dontAlignCalls?ctx.column+(closing?0:1):")"!=ctx.type||closing?ctx.indented+(closing?0:cx.unit):ctx.indented+(statementIndentUnit||cx.unit)},languageData:{indentOnInput:function(){// Reindentation should occur on any bracket char: {}()[]
// or on a match of any of the block closing keywords, at
// the end of a line
var allClosings=[];for(var i in openClose)if(openClose[i]){var closings=openClose[i].split(";");for(var j in closings)allClosings.push(closings[j])}var re=new RegExp("[{}()\\[\\]]|("+allClosings.join("|")+")$");return re}(),commentTokens:{line:"//",block:{open:"/*",close:"*/"}}}}}Object.defineProperty(exports,"__esModule",{value:!0});const verilog=mkVerilog({});// TL-Verilog mode.
// See tl-x.org for language spec.
// See the mode in action at makerchip.com.
// Contact: steve.hoover@redwoodeda.com
// TLV Identifier prefixes.
// Note that sign is not treated separately, so "+/-" versions of numeric identifiers
// are included.
var tlvIdentifierStyle={"|":"link",">":"property",// Should condition this off for > TLV 1c.
$:"variable",$$:"variable","?$":"qualifier","?*":"qualifier","-":"contentSeparator","/":"property","/-":"property","@":"variableName.special","@-":"variableName.special","@++":"variableName.special","@+=":"variableName.special","@+=-":"variableName.special","@--":"variableName.special","@-=":"variableName.special","%+":"tag","%-":"tag","%":"tag",">>":"tag","<<":"tag","<>":"tag","#":"tag",// Need to choose a style for this.
"^":"attribute","^^":"attribute","^!":"attribute","*":"variable","**":"variable","\\":"keyword",'"':"comment"},tlvScopePrefixChars={"/":"beh-hier",">":"beh-hier","-":"phys-hier","|":"pipe","?":"when","@":"stage","\\":"keyword"},tlvIndentUnit=3,tlvIdentMatch=/^([~!@#\$%\^&\*-\+=\?\/\\\|'"<>]+)([\d\w_]*)/;// Lines starting with these characters define scope (result in indentation).
const tlv=mkVerilog({hooks:{electricInput:!1,// Return undefined for verilog tokenizing, or style for TLV token (null not used).
// Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting
// can be enabled with the definition of cm-tlv-* styles, including highlighting for:
//   - M4 tokens
//   - TLV scope indentation
//   - Statement delimitation (enabled by tlvTrackStatements)
token:function(stream,state){var match,style=void 0;// Return value of pattern matches.
// Set highlighting mode based on code region (TLV or SV).
if(stream.sol()&&!state.tlvInBlockComment){"\\"==stream.peek()&&(style="def",stream.skipToEnd(),stream.string.match(/\\SV/)?state.tlvCodeActive=!1:stream.string.match(/\\TLV/)&&(state.tlvCodeActive=!0)),state.tlvCodeActive&&0==stream.pos&&0==state.indented&&(match=stream.match(/^[! ] */,!1))&&(state.indented=match[0].length);// Compute indentation state:
//   o Auto indentation on next line
//   o Indentation scope styles
var indented=state.indented,depth=indented/tlvIndentUnit;if(depth<=state.tlvIndentationStyle.length){// not deeper than current scope
var blankline=stream.string.length==indented,chPos=depth*tlvIndentUnit;if(chPos<stream.string.length){var bodyString=stream.string.slice(chPos),ch=bodyString[0];tlvScopePrefixChars[ch]&&(match=bodyString.match(tlvIdentMatch))&&tlvIdentifierStyle[match[1]]&&(indented+=tlvIndentUnit,!("\\"==ch&&0<chPos)&&(state.tlvIndentationStyle[depth]=tlvScopePrefixChars[ch],depth++))}// Clear out deeper indentation levels unless line is blank.
if(!blankline)for(;state.tlvIndentationStyle.length>depth;)state.tlvIndentationStyle.pop()}// Set next level of indentation.
state.tlvNextIndent=indented}if(state.tlvCodeActive){var match;if(void 0!==style);else if(state.tlvInBlockComment)stream.match(/^.*?\*\//)?state.tlvInBlockComment=!1:stream.skipToEnd(),style="comment";else if((match=stream.match(/^\/[\/\*]/))&&!state.tlvInBlockComment)"//"==match[0]?stream.skipToEnd():state.tlvInBlockComment=!0,style="comment";else if(match=stream.match(tlvIdentMatch)){// looks like an identifier (or identifier prefix)
var prefix=match[1],mnemonic=match[2];// is identifier prefix
tlvIdentifierStyle.hasOwnProperty(prefix)&&(// has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)
0<mnemonic.length||stream.eol())?style=tlvIdentifierStyle[prefix]:stream.backUp(stream.current().length-1)}else stream.match(/^\t+/)?// Highlight tabs, which are illegal.
style="invalid":stream.match(/^[\[\]{}\(\);\:]+/)?// [:], (), {}, ;.
style="meta":(match=stream.match(/^[mM]4([\+_])?[\w\d_]*/))?// m4 pre proc
style="+"==match[1]?"keyword.special":"keyword":stream.match(/^ +/)?stream.eol()&&(style="error"):stream.match(/^[\w\d_]+/)?// alpha-numeric token.
style="number":// Eat the next char w/ no formatting.
stream.next()}else stream.match(/^[mM]4([\w\d_]*)/)&&(style="keyword");return style},indent:function(state){return!0==state.tlvCodeActive?state.tlvNextIndent:-1},startState:function(state){state.tlvIndentationStyle=[],state.tlvCodeActive=!0,state.tlvNextIndent=-1,state.tlvInBlockComment=!1}}});return exports.tlv=tlv,exports.verilog=verilog,exports}