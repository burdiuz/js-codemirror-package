async function moduleInitFunction(require,exports={}){function wordRegexp(words){return new RegExp("^(("+words.join(")|(")+"))\\b","i")}function tokenBase(stream,state){stream.sol()&&(state.label=!0,state.commandMode=0);// The <space> character has meaning in MUMPS. Ignoring consecutive
// spaces would interfere with interpreting whether the next non-space
// character belongs to the command or argument context.
// Examine each character and update a mode variable whose interpretation is:
//   >0 => command    0 => argument    <0 => command post-conditional
var ch=stream.peek();// MUMPS comment starts with ";"
return(" "==ch||"\t"==ch?(state.label=!1,0==state.commandMode?state.commandMode=1:(0>state.commandMode||2==state.commandMode)&&(state.commandMode=0)):"."!=ch&&0<state.commandMode&&(":"==ch?state.commandMode=-1:state.commandMode=2),("("===ch||"\t"===ch)&&(state.label=!1),";"===ch)?(stream.skipToEnd(),"comment"):stream.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/)?"number":"\""==ch?stream.skipTo("\"")?(stream.next(),"string"):(stream.skipToEnd(),"error"):stream.match(doubleOperators)||stream.match(singleOperators)?"operator":stream.match(singleDelimiters)?null:brackets.test(ch)?(stream.next(),"bracket"):0<state.commandMode&&stream.match(command)?"controlKeyword":stream.match(intrinsicFuncs)?"builtin":stream.match(identifiers)?"variable":"$"===ch||"^"===ch?(stream.next(),"builtin"):"@"===ch?(stream.next(),"string.special"):/[\w%]/.test(ch)?(stream.eatWhile(/[\w%]/),"variable"):(stream.next(),"error");// Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator
// Handle Strings
// Handle operators and Delimiters
// Prevents leading "." in DO block from falling through to error
// Detect dollar-sign when not a documented intrinsic function
// "^" may introduce a GVN or SSVN - Color same as function
// MUMPS Indirection
// Handle non-detected items
}Object.defineProperty(exports,"__esModule",{value:!0});var singleOperators=/^[\+\-\*/&#!_?\\<>=\'\[\]]/,doubleOperators=/^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))/,singleDelimiters=/^[\.,:]/,brackets=/[()]/,identifiers=/^[%A-Za-z][A-Za-z0-9]*/,intrinsicFuncs=wordRegexp(["\\$ascii","\\$char","\\$data","\\$ecode","\\$estack","\\$etrap","\\$extract","\\$find","\\$fnumber","\\$get","\\$horolog","\\$io","\\$increment","\\$job","\\$justify","\\$length","\\$name","\\$next","\\$order","\\$piece","\\$qlength","\\$qsubscript","\\$query","\\$quit","\\$random","\\$reverse","\\$select","\\$stack","\\$test","\\$text","\\$translate","\\$view","\\$x","\\$y","\\$a","\\$c","\\$d","\\$e","\\$ec","\\$es","\\$et","\\$f","\\$fn","\\$g","\\$h","\\$i","\\$j","\\$l","\\$n","\\$na","\\$o","\\$p","\\$q","\\$ql","\\$qs","\\$r","\\$re","\\$s","\\$st","\\$t","\\$tr","\\$v","\\$z"]),command=wordRegexp(["break","close","do","else","for","goto","halt","hang","if","job","kill","lock","merge","new","open","quit","read","set","tcommit","trollback","tstart","use","view","write","xecute","b","c","d","e","f","g","h","i","j","k","l","m","n","o","q","r","s","tc","tro","ts","u","v","w","x"]);return exports.mumps={startState:function(){return{label:!1,commandMode:0}},token:function(stream,state){var style=tokenBase(stream,state);return state.label?"tag":style}},exports}