async function moduleInitFunction(require,exports={}){function tokenBase(stream,state){var ch=stream.peek();//Comment
if(state.incomment)return stream.skipTo("#}")?(stream.eatWhile(/\#|}/),state.incomment=!1):stream.skipToEnd(),"comment";//Tag
if(state.intag){//After operator
if(state.operator){if(state.operator=!1,stream.match(atom))return"atom";if(stream.match(number))return"number"}//After sign
if(state.sign){if(state.sign=!1,stream.match(atom))return"atom";if(stream.match(number))return"number"}if(state.instring)return ch==state.instring&&(state.instring=!1),stream.next(),"string";if("'"==ch||"\""==ch)return state.instring=ch,stream.next(),"string";if(stream.match(state.intag+"}")||stream.eat("-")&&stream.match(state.intag+"}"))return state.intag=!1,"tag";if(stream.match(operator))return state.operator=!0,"operator";if(stream.match(sign))state.sign=!0;else if(stream.eat(" ")||stream.sol()){if(stream.match(keywords))return"keyword";if(stream.match(atom))return"atom";if(stream.match(number))return"number";stream.sol()&&stream.next()}else stream.next();return"variable"}if(stream.eat("{")){if(stream.eat("#"))return state.incomment=!0,stream.skipTo("#}")?(stream.eatWhile(/\#|}/),state.incomment=!1):stream.skipToEnd(),"comment";//Open tag
if(ch=stream.eat(/\{|%/))return state.intag=ch,"{"==ch&&(state.intag="}"),stream.eat("-"),"tag"}stream.next()}Object.defineProperty(exports,"__esModule",{value:!0});var keywords=["and","as","block","endblock","by","cycle","debug","else","elif","extends","filter","endfilter","firstof","for","endfor","if","endif","ifchanged","endifchanged","ifequal","endifequal","ifnotequal","endifnotequal","in","include","load","not","now","or","parsed","regroup","reversed","spaceless","endspaceless","ssi","templatetag","openblock","closeblock","openvariable","closevariable","openbrace","closebrace","opencomment","closecomment","widthratio","url","with","endwith","get_current_language","trans","endtrans","noop","blocktrans","endblocktrans","get_available_languages","get_current_language_bidi","plural"],operator=/^[+\-*&%=<>!?|~^]/,sign=/^[:\[\(\{]/,atom=["true","false"],number=/^(\d[+\-\*\/])?\d+(\.\d+)?/;keywords=new RegExp("(("+keywords.join(")|(")+"))\\b"),atom=new RegExp("(("+atom.join(")|(")+"))\\b");return exports.jinja2={startState:function(){return{tokenize:tokenBase}},token:function(stream,state){return state.tokenize(stream,state)},languageData:{commentTokens:{block:{open:"{#",close:"#}"}}}},exports}